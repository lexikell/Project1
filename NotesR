#notes on using R/Rstudio

#Rob H on Youtube uses unix (linux?) language within R 
    - so I think I was just confused when reading the bioconductor code, but I guess I can just call things using unix language
    - which makes sense bc ppl say that R has many ways to do one thing
    - also bc I *think* I could technically download python within Rstudio and run python within (and vice versa with python)

#Rstudio
- use "<-" to assign a variable
- A list of unix and R equivalent commands
    - https://www.r-bloggers.com/2018/12/10-r-functions-for-linux-commands-and-vice-versa/
- top left holds your scripts
- bottom left is your terminal
    - either R specific (console) or your local terminal (can probably ssh in there(?))
- bottom right is your help/programs/whatever
    - also where you see any graphs
- top right has your environment info 
    - contains list of variables you have already set
    - also has how many "elements" there are in that file (matches with the lines in my csv)
- to run a script
    - can highlight script and hit "run" (or command+enter)
    - in your ternminal, can run R script using "Rscript" followed by the location of your script and script name
        - for ex) "Rscript /Users/lexikellington/R/rectangle.R"
- If the console is sitting at a "+" and not the typical ">" for inputting commands, just hit "esc" to cancel last command
    - it's waiting for more info but idk what 
- DOES NOT automatically save your files 
- basic stats:
    - median of given column in df: median(annoIDsNdf_upTSS[["pValue"]])
    - can do the same with mean, range, others
    - count how many values are in a given variable/column: annoIDsHdf_upTSS %>% count(score)
    - which row has the max value in a given column?: which.max(annoIDsNdf_upTSS$pValue) #output a row number
        - then look at that column content using: annoIDsNdf_upTSS[39576, ]


dataframe in R:
    - this is a two dimensional array/table
    - each column is a variable with X values
    - each row is one set of values from each column 
- grep: how to count how many terms within your whatever 
    - ex) find "FAM" in the annoIDs dataframe: grep("FAM", annoIDsHdf)
    count nas: sum(is.na(annoIDsHdf))
- make new df excluding NA:
    - count total rows: nrow(df)
    - count NA: sum(is.na(df$col))      #sum(is.na(annoIDsNdf$symbol))
    - new_df <- na.omit(df, c("myvar1", "myvar2"))
    - nrow(newdf)
- subset df  
    - Select all columns from Sepal.Length to Petal.Length: my_data %>% select(Sepal.Length:Petal.Length)


#run on Compute canada
- use the normal bash script slurm job stats that you have on your .sh scripts, and then you can go straight to running your R script using "Rscript" function 
    - for example: "Rscript computation.R" would be your only line of code, as long as the .R is within the same directory you are currently in (otherwise, define that dir)

---
mir:
-srun before program? 
-send to email for run times
    -it will make a "slurm" file on the run error 
    -and then see if you close your cmpt this will not fail (she says itll be good)
-emacs is her nano 
-add the bioconductor app that they don't have
-compute canada wiki for nodes selection 
